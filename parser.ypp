%{

#include "utils.hpp"
using namespace output;

void yyerror(const char*);

extern int yylex();
extern int yylineno;

#define YYINITDEPTH 10000

%}

// normal tokens
%token VOID
%token INT
%token STRING
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token NUM
%token RETURN
%token ELSE
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID

// dangling else
%precedence LPAREN RPAREN
%precedence ELSE

// associative tokens, from low priority to high priority
%right ASSIGN

%left OR
%left AND

%left EQUALOP
%nonassoc RELOP

%left PLUS MINUS
%left DIV MUL

%left NOT

%token LPAREN
%token RPAREN


%%
Program: 		Funcs {$$ = program($1);}
;
Funcs:			/*epsilon*/ {$$ = funcs();}
			|	FuncDecl Funcs {$$ = funcsRightRec($1, $2);}
;
FuncDecl:		RetType ID LPAREN Formals RPAREN {setReturnType($1); addFunc($1, $2, $4);} LBRACE Statements {exitFunc($8);} RBRACE 
				{$$ = funcDecl($1, $2, $4, $8);}
;
RetType:		Type {$$ = retType($1);}
			|	VOID {$$ = retType();}
;
Formals:		/*epsilon*/ {$$ = formals();}
			|	FormalsList {$$ = formals($1);}
;
FormalsList:	FormalDecl {$$ = formalsList($1);}
			|	FormalDecl COMMA FormalsList {$$ = formalsListRightRec($1, $3);}
;
FormalDecl:		Type ID {$$ = formalDecl($1, $2);}
;
Statements:		Statement {$$ = statementsEnd($1);}
			|	Statements {backpatchStatements($1);} Statement {$$ = statementsLeftRec($1, $3);}
;
Statement:		LBRACE EnterScope Statements ExitScope RBRACE {$$ = statementList($3);}	
			| 	Type ID SC {$$ = statementVarDecl($1, $2);}
			|	Type ID ASSIGN Exp SC {$$ = statementVarDeclInit($1, $2, $4);}
			|	ID ASSIGN Exp SC {$$ = statementAssign($1, $3);}
			|	Call SC {$$ = statementCall($1);}
			|	RETURN SC {$$ = statementReturn();}
			|	RETURN Exp SC {$$ = statementReturn($2);}
			|	IF LPAREN Exp RPAREN EnterScope M Statement N ExitScope ELSE EnterScope M Statement N ExitScope
				{$$ = statementIfElse($3, $6, $7, $8, $12, $13, $14);}
			|	IF LPAREN Exp RPAREN EnterScope M Statement N ExitScope {$$ = statementIf($3, $6, $7, $8);}
			|	WHILE LPAREN Exp RPAREN EnterWhile EnterScope M Statement N ExitScope ExitWhile ELSE EnterScope M Statement N ExitScope 
				{$$ = statementWhileElse($3, $7, $8, $9, $14, $15, $16);}
			|   WHILE LPAREN Exp RPAREN EnterWhile EnterScope M Statement N ExitScope ExitWhile
				{$$ = statementWhile($3, $7, $8, $9);}
			|	BREAK SC {$$ = statementBreak();}
			|	CONTINUE SC {$$ = statementContinue();}
;
Call:			ID LPAREN ExpList RPAREN {$$ = call($1, $3);}
			|	ID LPAREN RPAREN {$$ = call($1);}
;
ExpList:		Exp {$$ = expListFromExp($1);}
			|	Exp COMMA ExpList {$$ = expListRightRec($1, $3);}
;
Type:			INT {$$ = typeInt();}
			|	BYTE {$$ = typeByte();}
			|	BOOL {$$ = typeBool();}
;
Exp:			LPAREN Exp RPAREN {$$ = expFromExp($2);}
			|	Exp PLUS Exp {$$ = expFromBinop($1, $3, BinOp::PLUS);}
			|	Exp MINUS Exp {$$ = expFromBinop($1, $3, BinOp::MINUS);}
			|	Exp MUL Exp {$$ = expFromBinop($1, $3, BinOp::MUL);}
			|	Exp DIV Exp {$$ = expFromBinop($1, $3, BinOp::DIV);}
			|	ID {$$ = expFromId($1);}
			|	Call {$$ = expFromCall($1);}
			|	NUM {$$ = expFromNum($1);}
			|	NUM B {$$ = expFromByte($1);}
			|	STRING {$$ = expFromString($1);}
			|	TRUE {$$ = expFromBool(true);}
			|	FALSE {$$ = expFromBool(false);}
			|	NOT Exp {$$ = expFromNot($2);}
			|	Exp AND M Exp {$$ = expFromLogicop($1, $3, $4, LogicOp::AND);}
			|	Exp OR M Exp {$$ = expFromLogicop($1, $3, $4, LogicOp::OR);}
			|	Exp RELOP Exp {$$ = expFromRelop($1, $2, $3);}
			|	Exp EQUALOP Exp {$$ = expFromRelop($1, $2, $3);}
;
N:			/*epsilon*/ {$$ = n();}
;

M:			/*epsilon*/ {$$ = m();}
;

EnterWhile:	 /*epsilon*/ {enterWhile();}
;
ExitWhile:	 /*epsilon*/ {exitWhile();}
;

EnterScope:	/*epsilon*/ {enterScope();}
;

ExitScope: /*epsilon*/  {exitScope();}
;
%%

void yyerror(const char* msg) {
	throw synException();
}

int main() {
	init_global_prog();
	int value = -1;
	initGlobalVars();

	try {
		value = yyparse();
	}	
	catch (const lexException& e){
		errorLex(yylineno);
	}
	catch (const synException& e) {
		errorSyn(yylineno);
	}
	catch (const errorUndefException& e) {
		errorUndef(yylineno, e.getID());
	}	
	catch (const errorDefException& e) {
		errorDef(yylineno, e.getID());
	}	
	catch(const errorUndefFuncException& e) {
		errorUndefFunc(yylineno, e.getID());
	}	
	catch (const errorMismatchException& e) {
		errorMismatch(yylineno);
	}	
	catch (const errorPrototypeMismatchException& e) {
		auto argTypes = e.getArgTypes();
		errorPrototypeMismatch(yylineno, e.getID(), argTypes);
	}	
	catch (const errorUnexpectedBreakException& e) {
		errorUnexpectedBreak(yylineno);
	} 	
	catch (const errorUnexpectedContinueException& e) {
		errorUnexpectedContinue(yylineno);
	}	
	catch (const errorMainMissingException& e) {
		errorMainMissing();
	} 	
	catch(const errorByteTooLargeException& e) {
		errorByteTooLarge(yylineno, e.getValue());
	}

	clearMemory();
	end_global_prog();
	return value;
}